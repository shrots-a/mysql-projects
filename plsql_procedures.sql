# PLSQL PROCEDURES
#GETTINGFLIGHTINFOVIATHEFLIGHT STATUS
CREATE OR REPLACE PROCEDURE FLIGHTSTAT ( IN_STATUS VARCHAR2 )AS CURSOR fSTATUS
IS SELECT DISTINCT f.FLIGHT_CODE, al.AL_NAME, f.ARRIVAL, f.departure, f.SOURCE, f.DESTINATION, f.STATUS, f.FLIGHTTYPE
FROM Airline al, Airport ap, flight f WHERE al.AIRLINEID = f.AIRLINEID AND f.STATUS = IN_STATUS;
FlightzStatus fSTATUS%rowtype;
BEGIN
OPEN fSTATUS; LOOP
FETCH fSTATUS INTO FlightzStatus;
EXIT WHEN fSTATUS%NOTFOUND; dbms_output.put_line(FlightzStatus.FLIGHT_CODE || ' ' || FlightzStatus.AL_NAME || ' ' ||
FlightzStatus.ARRIVAL || ' ' || FlightzStatus.departure || ' ' || FlightzStatus.Source || ' ' || FlightzStatus.DESTINATION || ' ' || FlightzStatus.STATUS || ' ' || FlightzStatus.FLIGHTTYPE);
END LOOP;
CLOSE fSTATUS; END;
/
DECLARE
in_stat varchar(10); BEGIN
in_stat := 'Delayed';
flightstat(in_stat); END;

# GETTINGFLIGHTINFOANDPASSENGER INFO VIA THEPASSENGER CLASS
CREATE OR REPLACE PROCEDURE PASSENGER_CLASS (classs VARCHAR2) AS CURSOR ECOPASSDETAILS IS
SELECT al.AL_NAME, fl.FLIGHT_CODE, p2.FNAME, p2.LNAME, p2.PASSPORTNO, t.CLASS, t.DATE_OF_TRAVEL, t.DESTINATION, t.SOURCE, t.SEATNO, t.TICKET_NUMBER FROM Airline al, Flight fl, PASSENGER1 p1, PASSENGER2 p2, PASSENGER3 p3, TICKET1 t WHERE al.AIRLINEID = fl.AIRLINEID AND p1.PID= p3.PID AND p1.PASSPORTNO = p2.PASSPORTNO AND fl.FLIGHT_CODE = p3.FLIGHT_CODE AND t.PASSPORTNO = p2.PASSPORTNO AND t.class = classs;
PASSDETAILS ECOPASSDETAILS%ROWTYPE; BEGIN
OPEN ECOPASSDETAILS; LOOP
FETCH ECOPASSDETAILS INTO PASSDETAILS;
EXIT WHEN ECOPASSDETAILS%NOTFOUND; DBMS_OUTPUT.PUT_LINE(PASSDETAILS.AL_NAME || ' ' ||
PASSDETAILS.FLIGHT_CODE || ' ' || PASSDETAILS.FNAME || ' ' || PASSDETAILS.LNAME || ' ' || PASSDETAILS.PASSPORTNO || ' ' || PASSDETAILS.CLASS || ' ' || PASSDETAILS.SOURCE || ' ' || PASSDETAILS.SEATNO || ' ' || PASSDETAILS.TICKET_NUMBER);
END LOOP;
CLOSE ECOPASSDETAILS; END;
/
 #GETTINGFLIGHTINFOFROMDESTINATION
CAN BE IMPLIED FOR SOURCE KNOWN AS WELLL !
CREATE OR REPLACE PROCEDURE FLIGHT_DESTI (DEST varchar2) AS
CURSOR FLIGHTDESTDETAILS IS
SELECT al.AL_NAME, fl.FLIGHT_CODE, fl.SOURCE, fl.DESTINATION FROM Airline al, Flight fl
WHERE al.AIRLINEID = fl.AIRLINEID AND fl.DESTINATION = DEST;
PASSDETAILS FLIGHTDESTDETAILS%ROWTYPE; BEGIN
 22
   OPEN FLIGHTDESTDETAILS; LOOP
FETCH FLIGHTDESTDETAILS INTO PASSDETAILS; EXIT WHEN FLIGHTDESTDETAILS%NOTFOUND;
dbms_output.put_line(PASSDETAILS.AL_NAME || ' ' || PASSDETAILS.FLIGHT_CODE || ' ' || PASSDETAILS.SOURCE || ' ' || PASSDETAILS.DESTINATION);
END LOOP;
CLOSE FLIGHTDESTDETAILS; END;
/
DECLARE
DEST varchar2(20);
BEGIN
DEST := 'TPA'; FLIGHT_DESTI(DEST);
END; /
  #GETTINGPASSENGERINFOFROMTICKET NUMBER
CREATE OR REPLACE PROCEDURE PASS_INFO(T_NUMBER varchar2, F_CODE VARCHAR2) AS
CURSOR PASSINFODETAILS IS
SELECT fl.FLIGHT_CODE, p2.FNAME, p2.LNAME, p2.PASSPORTNO,
t.TICKET_NUMBER, T.DATE_OF_TRAVEL
FROM Flight fl, PASSENGER1 p1, PASSENGER2 p2, PASSENGER3 p3, TICKET1 t WHERE fl.FLIGHT_CODE = p3.FLIGHT_CODE
AND P3.PID = P1.PID
AND P1.PASSPORTNO = P2.PASSPORTNO AND t.TICKET_NUMBER = T_NUMBER AND T.PASSPORTNO = P2.PASSPORTNO
23
 
   AND fl.FLIGHT_CODE = F_CODE;
PASSDETAILS PASSINFODETAILS%rowtype; BEGIN
Open PASSINFODETAILS ;
LOOP
fetch PASSINFODETAILS into PASSDETAILS; EXIT WHEN PASSINFODETAILS%NOTFOUND;
dbms_output.put_line(PASSDETAILS.FLIGHT_CODE || ' ' || PASSDETAILS.FNAME || ' ' || PASSDETAILS.TICKET_NUMBER || ' '
||PASSDETAILS.PASSPORTNO || ' ' || PASSDETAILS.DATE_OF_TRAVEL); END LOOP;
close PASSINFODETAILS; END;
/
DECLARE
T_NUMBER varchar2(20); F_CODE varchar2(20);
BEGIN
T_NUMBER := '1251334499699'; F_CODE := 'QR1902'; PASS_INFO(T_NUMBER, F_CODE);
END; /
 24
 
   # GETTINGPASSENGERSINFOFROMTHE FLIGHT CODE
CREATE OR REPLACE PROCEDURE FCODE_INFO (DOT DATE, F_CODE VARCHAR2) AS
CURSOR PASSINDETAILS IS
SELECT fl.FLIGHT_CODE, p2.FNAME, t.TICKET_NUMBER, t.DATE_OF_TRAVEL,
p2.PASSPORTNO
FROM Flight fl, PASSENGER1 p1, PASSENGER2 p2, PASSENGER3 p3, TICKET1 t WHERE fl.FLIGHT_CODE = p3.FLIGHT_CODE
AND p3.PID = p1.PID
AND p2.PASSPORTNO = p1.PASSPORTNO
AND t.PID = p1.PID
AND t.DATE_OF_TRAVEL = DOT
AND fl.FLIGHT_CODE = F_CODE;
PASSDETAILS PASSINDETAILS%ROWTYPE; BEGIN
OPEN PASSINDETAILS; LOOP
FETCH PASSINDETAILS INTO PASSDETAILS;
EXIT WHEN PASSINDETAILS%NOTFOUND; DBMS_OUTPUT.PUT_LINE (PASSDETAILS.FLIGHT_CODE || ' ' ||
PASSDETAILS.FNAME || ' ' || PASSDETAILS.TICKET_NUMBER || ' ' || PASSDETAILS.PASSPORTNO || ' ' || PASSDETAILS.DATE_OF_TRAVEL);
END LOOP;
CLOSE PASSINDETAILS; END;
/
DECLARE
DOT DATE;
F_CODE VARCHAR2(20);
BEGIN
DOT := TO_DATE('05-MAY-23', 'DD-MON-YY'); F_CODE := '9W2334';
FCODE_INFO(DOT, F_CODE);
END; /
 25
 
    ALLFLIGHTSBELONGINGTOONEAIRLINE
CREATE OR REPLACE PROCEDURE F_INFO (id VARCHAR2) AS
CURSOR PASSINDETAILS IS
SELECT fl.FLIGHT_CODE, ai.airlineid, ai.al_name FROM Flight fl, AIRLINE ai
WHERE fl.airlineid = ai.airlineid AND ai.airlineid = id;
PASSDETAILS PASSINDETAILS%ROWTYPE; BEGIN
OPEN PASSINDETAILS;
LOOP
FETCH PASSINDETAILS INTO PASSDETAILS; EXIT WHEN PASSINDETAILS%NOTFOUND;
DBMS_OUTPUT.PUT_LINE (PASSDETAILS.FLIGHT_CODE || ' ' || PASSDETAILS.AIRLINEID || ' ' || PASSDETAILS.AL_NAME);
END LOOP;
CLOSE PASSINDETAILS; END;
/
DECLARE
ID VARCHAR2(10); BEGIN
ID := 'QR';
F_INFO(ID); END;
/
 CHEAPESTFLIGHT DECLARE
CHEAPEST TICKET2.PRICE%TYPE;
BEGIN
SELECT MIN(PRICE) INTO CHEAPEST FROM TICKET2 WHERE SOURCE = 'BOM' AND DESTINATION = 'DFW' AND CLASS = 'ECONOMY'; DBMS_OUTPUT.PUT_LINE(CHEAPEST);
END;
 26
 
     COUNTPASSENGERSINAFLIGHT DECLARE
PCOUNT PASSENGER3.PID%TYPE;
BEGIN
SELECT COUNT(PID) INTO PCOUNT FROM PASSENGER3 WHERE FLIGHT_CODE = 'QR1902'; DBMS_OUTPUT.PUT_LINE(PCOUNT);
END;
  COUNTFLIGHTSBETWEENTWOSTATIONS DECLARE
FCOUNT FLIGHT.FLIGHT_CODE%TYPE; BEGIN
SELECT COUNT(FLIGHT_CODE) INTO FCOUNT FROM FLIGHT WHERE DESTINATION = 'DFW' AND SOURCE = 'BOM' ;
DBMS_OUTPUT.PUT_LINE(FCOUNT); END;
 27
 
   # GETTING PASSENGER AND TAXI INFO FROM PICKUPPOINT AND AIRPORT NAME
CREATE OR REPLACE PROCEDURE TAXI_INFO (PPOINT VARCHAR2 , APNAME VARCHAR2)
AS
CURSOR PASSINDETAILS IS
SELECT p2.FNAME, P2.PASSPORTNO, T1.TAXI_NUMBER, T1.PICKUP_POINT, T1.AP_NAME, T2.DRIVER_ID, T2.DRIVER_NAME
FROM PASSENGER1 p1, PASSENGER2 p2, TAXI1 t1, TAXI2 t2, TAXI3 t3 WHERE P2.PASSPORTNO = P1.PASSPORTNO
AND T3.PID = P1.PID
AND T3.PASSPORTNO = P1.PASSPORTNO AND T1.PICKUP_POINT = PPOINT
AND T1.TAXI_NUMBER = T3.TAXI_NUMBER AND T3.DRIVER_ID = T2.DRIVER_ID
AND T1.AP_NAME = APNAME;
PASSDETAILS PASSINDETAILS %ROWTYPE; BEGIN
OPEN PASSINDETAILS; LOOP
FETCH PASSINDETAILS INTO PASSDETAILS;
EXIT WHEN PASSINDETAILS%NOTFOUND; DBMS_OUTPUT.PUT_LINE(PASSDETAILS.AP_NAME || ' ' ||
PASSDETAILS.PICKUP_POINT || ' ' || PASSDETAILS.TAXI_NUMBER || ' '
|| PASSDETAILS.PASSPORTNO || ' ' || PASSDETAILS.DRIVER_ID || ' ' ||
28
 
   PASSDETAILS.DRIVER_NAME); END LOOP;
CLOSE PASSINDETAILS;
END;
/ DECLARE
PPOINT VARCHAR2(20) := 'B';
APNAME VARCHAR2(50) := 'Chandigarh International Airport'; BEGIN
TAXI_INFO(PPOINT, APNAME); END;
/
 29
 
# TRIGGERx
CREATE OR REPLACE TRIGGER DELAYEDFLIGHTS
AFTER INSERT ON FLIGHT FOR EACH ROW when ( new.status = 'Delayed') DECLARE
HI DELAYED_FLIGHTS.REPORT_TIME%TYPE; BEGIN
SELECT (to_CHAR(sysdate , 'HH24:MI')) INTO HI FROM DUAL;
insert into delayed_flights (FLIGHT_CODE, SOURCE, DESTINATION , AIRLINEID ,report_time) values(:new.flight_code,:new.source,:new.destination,:new.airlineid,HI);
END;
CREATE TABLE DELAYED_FLIGHTS ( FLIGHT_CODE VARCHAR2(20 ), DESTINATION VARCHAR2(20), SOURCE VARCHAR2(20), AIRLINEID VARCHAR2(20), REPORT_TIME VARCHAR(20) );
INSERT INTO FLIGHT(FLIGHT_CODE, SOURCE, DESTINATION, ARRIVAL, DEPARTURE, STATUS, DURATION, FLIGHTTYPE, AIRLINEID) VALUES('A7','BOM','DFW','02:10','03:15','Delayed','24hr','Connecting','AI');
select * from delayed_flights
